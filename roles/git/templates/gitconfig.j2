[hub]
        protocol = https
[user]
        name = {{ full_name }}
        email = {{ personal_git_user }}
[alias]
        a = add
        st = status
        s = status
        co = checkout
        cob = checkout -b
        c = checkout
        ci = commit
        noff = merge --no-ff
        plr = pull --rebase
        amend = commit --amend
        wip = commit --no-verify -am "WIP"
        br = branch
        rn = branch -m
        # diff-so-fancy
        # https://github.com/so-fancy/diff-so-fancy/#usage
        df = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"
        dfs = df --staged
        # Get changes for a single commit
        dfc = "!dfc() { git df $1^ $1; }; dfc"

        please = push --force-with-lease
        #publish = "!git push -u origin $(git rev-parse --abbrev-ref HEAD)"
        # publish current branch
        publish = "!f() { git push -u ${1:-origin} $(git rev-parse --abbrev-ref HEAD); }; f"

        # http://gggritso.com/human-git-aliases
        unstage = reset -q HEAD --
        discard = checkout --
        nevermind = checkout . 
        uncommit = reset --mixed HEAD~

        # https://stackoverflow.com/questions/4114095/how-do-i-revert-a-git-repository-to-a-previous-commit
        rv= "!f() { git revert --no-commit $1~1..HEAD; git reset; git status; }; f"

        l = log --graph --decorate --oneline --abbrev-commit --all
        h = log --graph --decorate --oneline --abbrev-commit

        #issues = !hub browse -- issues
        url = "!f() { git remote get-url origin | sed 's/.*@\\([^:/]*\\)[:/]\\(.*\\)\\.git/https:\\/\\/\\1\\/\\2/'; }; f"
        repo = "!f() {  open $(git url); }; f" 

        ## Bitbucket
        # TODO: Make this portable for github
        pr = "!f() { open \"$(git url)/pull-requests/\"; }; f" 
        create-pr = "!f() { open \"$(git url)/pull-requests/new\"; }; f" 
        commitlink = "!f() { open \"$(git url)/commits/$1\"; }; f"

        # TODO: make it use the local branch or pass the branch where to lookup
        # TODO: Use the correct path independently from how deep it is in the repo folder 
        file-link = "!f() { echo \"$(git url)/src/$1\"; }; f"

        # Copy current branch name to clipboard (macOS only)
        cb = "!git rev-parse --abbrev-ref HEAD | tr -d '\n' | pbcopy"

        remote-branches = "!f() { git ls-remote --heads ${1:origin} | sed 's?.*refs/heads/??'; }; f "
[color]
        diff = auto
        status = auto
        ui = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[core]
        excludesfile = ~/.gitignore_global
        editor = nvim
        hooksPath = ~/.config/git/hooks/
[apply]
        whitespace = nowarn
[mergetool]
        keepBackup = false
[difftool]
        prompt = false
[push]
        # See `git help config` (search for push.default)
        # for more information on different options of the below setting.
        #
        # Setting to git 2.0 default to surpress warning message
        default = simple
        followTags = true
[github]
        user = {{ personal_git_user }}
[bitbucket]
        user = {{ secondary_git_user }} 
        email = {{ secondary_git_email }} 

# Fix git error: Could not read Username for github.com 
# http://albertech.blogspot.com/2016/11/fix-git-error-could-not-read-username.html
[url "git@github.com:"]
    insteadOf = https://github.com/
[url "git@bitbucket.org:"]
    insteadOf = https://bitbucket.org/
